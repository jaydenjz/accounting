// Code generated by MockGen. DO NOT EDIT.
// Source: invoice.go

// Package repository_test is a generated GoMock package.
package repository_test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/jaydenjz/accounting/internal/domain"
)

// MockInvoiceRepository is a mock of InvoiceRepository interface.
type MockInvoiceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceRepositoryMockRecorder
}

// MockInvoiceRepositoryMockRecorder is the mock recorder for MockInvoiceRepository.
type MockInvoiceRepositoryMockRecorder struct {
	mock *MockInvoiceRepository
}

// NewMockInvoiceRepository creates a new mock instance.
func NewMockInvoiceRepository(ctrl *gomock.Controller) *MockInvoiceRepository {
	mock := &MockInvoiceRepository{ctrl: ctrl}
	mock.recorder = &MockInvoiceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceRepository) EXPECT() *MockInvoiceRepositoryMockRecorder {
	return m.recorder
}

// GetByDateRange mocks base method.
func (m *MockInvoiceRepository) GetByDateRange(ctx context.Context, start, end time.Time) ([]domain.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByDateRange", ctx, start, end)
	ret0, _ := ret[0].([]domain.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByDateRange indicates an expected call of GetByDateRange.
func (mr *MockInvoiceRepositoryMockRecorder) GetByDateRange(ctx, start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByDateRange", reflect.TypeOf((*MockInvoiceRepository)(nil).GetByDateRange), ctx, start, end)
}
