// Code generated by MockGen. DO NOT EDIT.
// Source: invoice_usecase.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/jaydenjz/accounting/internal/domain"
)

// MockInvoice is a mock of Invoice interface.
type MockInvoice struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceMockRecorder
}

// MockInvoiceMockRecorder is the mock recorder for MockInvoice.
type MockInvoiceMockRecorder struct {
	mock *MockInvoice
}

// NewMockInvoice creates a new mock instance.
func NewMockInvoice(ctrl *gomock.Controller) *MockInvoice {
	mock := &MockInvoice{ctrl: ctrl}
	mock.recorder = &MockInvoiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoice) EXPECT() *MockInvoiceMockRecorder {
	return m.recorder
}

// GetInvoices mocks base method.
func (m *MockInvoice) GetInvoices(arg0 context.Context, arg1, arg2 time.Time) ([]domain.Invoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvoices", arg0, arg1, arg2)
	ret0, _ := ret[0].([]domain.Invoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvoices indicates an expected call of GetInvoices.
func (mr *MockInvoiceMockRecorder) GetInvoices(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvoices", reflect.TypeOf((*MockInvoice)(nil).GetInvoices), arg0, arg1, arg2)
}
